class MultiplicationTable extends Thread {
    private int number;

    public MultiplicationTable(int number) {
        this.number = number;
    }

    @Override
    public void run() {
        System.out.println("Thread " + Thread.currentThread().getName() + " started.");
        for (int i = 1; i <= 10; i++) {
            System.out.println(number + " x " + i + " = " + (number * i));
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                System.out.println("Thread " + Thread.currentThread().getName() + " interrupted.");
            }
        }
        System.out.println("Thread " + Thread.currentThread().getName() + " finished.");
    }
}

public class MultiplicationTableDemo {
    public static void main(String[] args) {
        MultiplicationTable tableFor5 = new MultiplicationTable(5);
        MultiplicationTable tableFor10 = new MultiplicationTable(10);

        System.out.println("Thread for 5 state before start: " + tableFor5.getState());
        System.out.println("Thread for 10 state before start: " + tableFor10.getState());

        tableFor5.start();
        tableFor10.start();

        System.out.println("Thread for 5 state after start: " + tableFor5.getState());
        System.out.println("Thread for 10 state after start: " + tableFor10.getState());

        try {
            tableFor5.join();
            tableFor10.join();
        } catch (InterruptedException e) {
            System.out.println("Main thread interrupted.");
        }

        System.out.println("Thread for 5 state after completion: " + tableFor5.getState());
        System.out.println("Thread for 10 state after completion: " + tableFor10.getState());
        System.out.println("Main thread finished.");
    }
}
